from PySide6.QtWidgets import (
    QLabel,
    QPushButton,
)
import time
from PySide6.QtGui import QPixmap
from PySide6 import QtWidgets, QtCore, QtGui


class Second(QtWidgets.QMainWindow):
    def __init__(self, parent=None):
        super(Second, self).__init__(parent)
        self.setMinimumSize(1300, 700)
        self.setMaximumSize(1300, 700)
        self.initGUI()

    def initGUI(self):
        self.globallayout = QtWidgets.QVBoxLayout()  # combines navBar and mainlayout
        self.navigation = navigationBarTutorial()
        self.navigation.backButton.clicked.connect(lambda: self.updateSlide(-1))
        QtWidgets.QShortcut(
            QtGui.QKeySequence("left"),
            self.navigation.backButton,
            lambda: self.updateSlide(-1),
        )

        QtWidgets.QShortcut(
            QtGui.QKeySequence("right"),
            self.navigation.nextButton,
            lambda: self.updateSlide(1),
        )
        self.navigation.nextButton.clicked.connect(lambda: self.updateSlide(+1))
        self.navigation.finishButton.clicked.connect(self.close_window)

        # svgWidget = QtSvg.QSvgWidget("design/metis_eye_text.svg")
        # svgWidget.setAlignment(QtCore.Qt.AlignCenter)
        self.currentMolIndex = 0
        self.pixmap = [
            QPixmap("design/metis_eye_text.png").scaled(
                800, 800, QtCore.Qt.KeepAspectRatio
            ),
            QPixmap("design/drd2_examples.png"),
            QPixmap("design/drd2_examples.png"),
            QPixmap("design/global_like.png"),
            QPixmap("design/properties.png"),
            QPixmap("design/ugly_selection.png").scaled(
                800, 800, QtCore.Qt.KeepAspectRatio
            ),
            QPixmap("design/toxic_selection.png").scaled(
                800, 800, QtCore.Qt.KeepAspectRatio
            ),
            QPixmap("design/other_selection.png").scaled(
                800, 800, QtCore.Qt.KeepAspectRatio
            ),
            QPixmap("design/select_substructures.png").scaled(
                600, 600, QtCore.Qt.KeepAspectRatio
            ),
            QPixmap("design/navigation.png").scaled(
                800, 800, QtCore.Qt.KeepAspectRatio
            ),
        ]
        self.image = QLabel(self)
        self.image.setPixmap(self.pixmap[0])
        self.image.setAlignment(QtCore.Qt.AlignCenter)
        self.introductionText = [
            """
        Thanks for participating in this experiment.\n
        We want to explore, why medicinal chemist like or dislike molecules generated by Reinvent.
        We want to use this information to improve the Reinvent system in order or generated molecules 
        that are align better with the chemists ideas.\n
        Before a quick tutorial will explain the setting and how to use the 'Metis' tool.
        Please click 'Next' to continue.
        """,
            """
In this experiment, we want you to imagine yourself to be a medicinal chemist being assigned to an already-running project. In the project, multiple ligands have been identified and have undergone biological evaluations in the form of two assays, measuring the activity of the molecules towards two targets. You are tasked to provide feedback on these ligands and decide which ones would make good and which ones would make bad clinical candidates. The following text gives a brief overview of the context of the project:

We are working on a novel Dopamine receptor D2 (DRD2) antagonist to treat gastroparesis. Gastroparesis is a chronic gastric motility disorder, wherein food is processed much slower in the stomach than usual, leading to delayed gastric emptying. The most common symptoms include early satiety, nausea and vomiting as well as abdominal pain. 
Current DRD2 antagonists accepted for limited use are metoclopramide and domperidone.   
        """,
            """
        Both of these are associated with severe side effects when used over a prolonged time. Domperidone, for example, is linked to cardiac arrhythmia. The cause of which, is thought to be the relatively high inhibition of hERG by domperidone. 

The project focuses on developing a new DRD2 antagonist with a low affinity to hERG. All compounds have been tested and have an IC50 value below 50nM for DRD2 as well as an IC50 value above 10uM for hERG.
Next to the compounds, you will be given a percentage for each molecule by how much the measured activity exceeds/subceeds the chosen threshold (50nM/10uM). 
        """,
            """
        You have multiple ways to evaluate the molecule. For one you can chose how you generally like the molecule.
        """,
            """
        You can also select properties of the molecule that, in your opinion, are areas of concern.
        """,
            """
        You can also highlight substructures of the molecule that you want to give specific feedback on. Simply click on atoms 
        to select them. To unselect a specific molecule, click again. If you click next to the molecule, the complete selection
        will reset.\nBy default the selection will be set to 'Ugly', where we ask you to highlight substructures that you just do
        noy see as good.
        """,
            """
        You can also switch to other another category to assign a substructure to. Substructures highlighted for different properties can overlap.
        """,
            """
        If you have something particular you want to highlight, you can also use the 'Other' category, here you can type the what you think is peculiar 
        about the substructure. You can change the meaning of 'Other' for each molecule individually.
        """,
            """
        While we record many information on the selected atoms, it is sometimes difficult to understand the intention of the chemist. 
        In the example above, for example, a selection of the chlorine bonded carbon could either indicate that the chemist generally does not like the chlorine,
        but it could also indicate that they specifically dislike chlorine in combination with an aromatic ring. In order to explicitly collect this information, 
        we ask you to highlight the complete ring structure, to indicate to us when you dislike the a particular functional group in combination with a particular
        ring. 
        """,
            """
        With the 'Back' and 'Next' Button you can get to the previous or next molecule. When switching to a new molecule your selections will automatically be saved.\n
        You do not have to give feedback on every property or molecule even.
        """,
        ]
        self.text = QLabel(self.introductionText[self.currentMolIndex])
        self.text.setWordWrap(True)
        self.text.setAlignment(QtCore.Qt.AlignCenter)
        self.globallayout.addWidget(self.image)
        self.globallayout.addWidget(self.text)

        self.globallayout.addWidget(self.navigation)

        self.center = QtWidgets.QWidget()
        self.center.setLayout(self.globallayout)
        self.setCentralWidget(self.center)

        self.show()

    def updateSlide(self, direction):
        self.currentMolIndex = (self.currentMolIndex + direction) % len(
            self.introductionText
        )
        self.text.setText(self.introductionText[self.currentMolIndex])
        self.image.setPixmap(self.pixmap[self.currentMolIndex])
        if self.currentMolIndex == len(self.introductionText) - 1:
            self.navigation.finishButton.setVisible(True)

    def close_window(self):
        time.sleep(0.3)
        self.hide()


class navigationBarTutorial(QtWidgets.QWidget):
    """
    Combines multiple Checkboxes into a single Widget
    """

    def __init__(self):
        super(navigationBarTutorial, self).__init__()

        mainLayout = QtWidgets.QHBoxLayout()
        self.backButton = QPushButton("< Back")
        self.finishButton = QPushButton("Finish?")
        self.nextButton = QPushButton("Next >")
        self.finishButton.setVisible(False)
        self.finishButton.pressed.connect(self.finishClickAnimation)
        mainLayout.addWidget(self.backButton)
        mainLayout.addWidget(self.finishButton)
        mainLayout.addWidget(self.nextButton)
        mainLayout.setAlignment(QtCore.Qt.AlignBottom | QtCore.Qt.AlignCenter)
        self.setLayout(mainLayout)

    def finishClickAnimation(self):
        self.finishButton.setStyleSheet(
            "color: #ECECEC;background-color: #4295f5;border: 3px solid #4295f5"
        )
        self.finishButton.setText("Okay!")
